[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"


[project]
name = "openapipages"
dynamic = ["version"]
description = 'OpenAPI Spec-based pages (SwaggerUI, ReDoc, RapiDoc, Elements, Scalar) ready with configuration features.'
readme = "README.md"
requires-python = ">=3.8"
license = "MIT"
keywords = [
  "openapipages",
  "fastapi",
  "flask",
  "litestar",
  "openapi",
  "swagger",
  "swagger-ui",
  "scalar",
  "elements",
  "redoc",
  "rapidoc",
  "api",
  "documentation",
  "specification",
  "spec",
]
authors = [{ name = "Hasan Sezer Taşan", email = "hasansezertasan@gmail.com" }]
maintainers = [
  { name = "Hasan Sezer Taşan", email = "hasansezertasan@gmail.com" },
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Environment :: Web Environment",
  "Framework :: FastAPI",
  "Framework :: Flask",
  "Intended Audience :: Developers",
  "Intended Audience :: Information Technology",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
  "Programming Language :: Python",
  "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
  "Topic :: Internet :: WWW/HTTP",
  "Topic :: Internet",
  "Topic :: Software Development :: Libraries :: Application Frameworks",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Topic :: Software Development :: Libraries",
  "Topic :: Software Development",
  "Typing :: Typed",
]
dependencies = []


[project.urls]
changelog = "https://github.com/hasansezertasan/openapipages/blob/main/CHANGELOG.md"
documentation = "https://github.com/hasansezertasan/openapipages#readme"
homepage = "https://github.com/hasansezertasan/openapipages"
issues = "https://github.com/hasansezertasan/openapipages/issues"
releasenotes = "https://github.com/hasansezertasan/openapipages/releases"
source = "https://github.com/hasansezertasan/openapipages.git"


[tool.uv]
cache-keys = [
  { file = "pyproject.toml" },
  { git = { commit = true, tags = true } },
]


[tool.hatch.version]
path = "src/openapipages/__about__.py"


[tool.hatch.envs.default]
installer = "uv"
extra-dependencies = [
  "fastapi>=0.63.0, <0.110.0",
  "uvicorn>=0.20.0, <0.29.0",
  "pre-commit>=3.0.0, <4.0.0",
]


[tool.hatch.envs.default.scripts]
start = "uvicorn examples.fastapi.main:app --reload"
pre = "pre-commit run --all-files --hook-stage manual --show-diff-on-failure"


[tool.hatch.envs.types]
extra-dependencies = ["mypy>=1.0.0", "ruff==0.4.5", "codespell==2.3.0"]
[tool.hatch.envs.types.scripts]
typing = "mypy --install-types --non-interactive {args:src/openapipages tests}"
style = ["ruff check {args:.}"]
format = ["ruff format {args:.}"]
spelling = "codespell ."
all = ["spelling", "typing", "style", "format"]

[tool.hatch.envs.hatch-test]
extra-dependencies = [
  "pytest>=6.0.0",
  "pytest-asyncio>=0.14.0",
  "httpx>=0.23.3, <0.27.0",
  "fastapi>=0.63.0, <0.110.0",
]

[tool.ruff]
# Run `ruff linter` command to see all available linters and their descriptions
target-version = "py38"
show-fixes = true
fix = true
[tool.ruff.lint]
select = [
  "A",
  "ARG",
  "B",   # flake8-bugbear
  "B9",
  "C",   # flake8-comprehensions
  "C4",  # flake8-comprehensions
  "C90", # mccabe
  "DTZ",
  "E",   # pycodestyle errors
  "E4",
  "E7",
  "E9",
  "EM",
  "ERA", # eradicate
  "F",   # pyflakes
  "I",   # isort
  "INT", # flake8-gettext
  "ICN",
  "N",   # pep8-naming
  "PIE", # flake8-pie,
  # "PLC", # pylint - convention
  "PLE", # pylint - error
  "PLR",
  "PLW", # pylint - warning
  "Q",   # flake8-quotes
  "RET", # flake8-return,
  "RUF", # Ruff-specific rules
  "SIM", # flake8-simplify
  # "S",
  "T",
  "TID",
  "T20", # flake8-print
  # "UP",  # pyupgrade
  "W",   # pycodestyle warnings
  "YTT",
]
ignore = [
  "E501", # line too long, handled by black
  "RET504", # Unnecessary assignment before returns
  "PLR2004", # Magic value used in comparison (.status_code == 200)
]
# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"
# Like Black, indent with spaces, rather than tabs.
indent-style = "space"
# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false
# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"
[tool.ruff.lint.pydocstyle]
convention = "google"
[tool.ruff.lint.isort]
known-third-party = ["openapipages"]

[tool.mypy]
files = ["src"]
pretty = true
python_version = "3.9"
show_error_codes = true
strict = true
disallow_untyped_defs = true
ignore_missing_imports = true
disallow_untyped_decorators = false


[tool.codespell]
ignore-words-list = "Connexion, connexion"


[tool.coverage.run]
source_pkgs = ["openapipages", "tests"]
branch = true
parallel = true
omit = [
  "src/openapipages/__about__.py",
]


[tool.coverage.paths]
openapipages = ["src/openapipages", "*/openapipages/src/openapipages"]
tests = ["tests", "*/openapipages/tests"]


[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]
